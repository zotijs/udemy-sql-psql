
-- with subquery
SELECT username, tags.created_at
FROM users
JOIN (
    SELECT user_id, created_at FROM caption_tags
    UNION ALL
    SELECT user_id, created_at FROM photo_tags
) AS tags ON users.id = tags.user_id
WHERE tags.created_at < '2010-01-07';

-- with a CTE (common table expression)
WITH tags AS (
    SELECT user_id, created_at FROM caption_tags
    UNION ALL
    SELECT user_id, created_at FROM photo_tags
)
SELECT username, tags.created_at
FROM users
JOIN tags ON users.id = tags.user_id
WHERE tags.created_at < '2010-01-07';

-- -- -- -- --
-- Recursive CTE
-- useful for tree or graph type data structures
-- must use a union
-- -- -- -- --

-- RCTE example: countdown from 3 to 1
WITH RECURSIVE countdown(val) AS (
    SELECT 3 AS validation -- Initial, non-recursive query
    UNION
    SELECT val - 1 FROM countdown WHERE val > 1 -- Recursive query
)
SELECT * 
FROM countdown;

-- Actual example based on instagram
-- RCTE example: follow suggestions
-- me: user_id = 1000
WITH RECURSIVE suggestions(leader_id, follower_id, depth) AS (
    SELECT leader_id, follower_id, 1 AS depth
    FROM followers
    WHERE follower_id = 1000
    UNION
    SELECT followers.leader_id, followers.follower_id, depth + 1
    FROM followers
    JOIN suggestions ON suggestions.leader_id = followers.follower_id
    WHERE depth < 3
)
SELECT DISTINCT users.id, users.username
FROM suggestions
JOIN users ON users.id = suggestions.leader_id
WHERE depth > 1
LIMIT 15;